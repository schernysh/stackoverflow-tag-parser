package org.cloudgarden.sotagparser;

import jodd.log.LoggerFactory;
import jodd.log.impl.Slf4jLoggerFactory;
import jodd.petite.PetiteContainer;
import jodd.petite.config.AutomagicPetiteConfigurator;
import jodd.petite.proxetta.ProxettaAwarePetiteContainer;
import jodd.props.Props;
import jodd.props.PropsUtil;
import jodd.proxetta.MethodInfo;
import jodd.proxetta.ProxyAspect;
import jodd.proxetta.impl.ProxyProxetta;
import jodd.proxetta.pointcuts.AllMethodsPointcut;
import org.cloudgarden.sotagparser.proxy.SoServiceAdvice;
import org.cloudgarden.sotagparser.proxy.SoServiceAdviceSupport;
import org.cloudgarden.sotagparser.service.MetricsService;
import org.cloudgarden.sotagparser.service.ParserService;
import org.cloudgarden.sotagparser.service.StackoverflowService;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) {
        final String query = getQueryOrDie(args);

        LoggerFactory.setLoggerFactory(new Slf4jLoggerFactory());

        // first initialize proxies
        final ProxyAspect soServiceProxy = new ProxyAspect(SoServiceAdvice.class,
                new AllMethodsPointcut() {
                    @Override
                    public boolean apply(MethodInfo methodInfo) {
                        return matchClassName(methodInfo, "*" + StackoverflowService.class.getSimpleName()) &&
                                super.apply(methodInfo);
                    }
                });
        final ProxyProxetta proxetta = ProxyProxetta.withAspects(soServiceProxy);

        // then initialize the container that it aware of the proxies configuration
        final PetiteContainer petite = new ProxettaAwarePetiteContainer(proxetta);
        new AutomagicPetiteConfigurator().configure(petite);

        final Props props = new Props();
        PropsUtil.loadFromClasspath(props, "/app*.props");
        petite.defineParameters(props);

        // finally finish initialization of the proxy advice
        // the only way to interact with the advice is through public static field
        SoServiceAdviceSupport.metrics = petite.getBean(MetricsService.class);

        petite.getBean(ParserService.class).parseAndPrint(query);
    }

    private static String getQueryOrDie(String[] args) {
        if (args.length == 1) {
            return args[0];
        } else {
            System.out.println("ERROR: There should be only one argument - a query string");
            System.exit(255);
            return null; // to satisfy the compiler
        }
    }
}
