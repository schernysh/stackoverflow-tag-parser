import com.google.common.util.concurrent.AtomicLongMap;
import org.cloudgarden.sotagparser.model.Question;
import org.cloudgarden.sotagparser.model.Wrapper;
import org.cloudgarden.sotagparser.service.StackoverflowService;

import java.util.Comparator;
import java.util.Map;

import static java.lang.String.format;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public static void main(String[] args) {

        int pageSize = 5;
        int maxPageNum = 10;
        int topNumber = 5;

        String query = "chain of responsibility";

        final StackoverflowService stackoverflowService = new StackoverflowService();

        final AtomicLongMap<String> tags = AtomicLongMap.create();

        Wrapper<Question> searchResult;
        int page = 1;

        do {
            searchResult = stackoverflowService.search(query, page++, pageSize);
            searchResult.getItems().stream().flatMap(q -> q.getTags().stream()).forEach(tags::incrementAndGet);
        } while (searchResult.isHas_more() && page <= maxPageNum);

        tags.asMap().entrySet().stream()
                .sorted(Comparator.<Map.Entry<String, Long>>comparingLong(Map.Entry::getValue).reversed())
                .limit(topNumber)
                .map(e -> format("%s x %d", e.getKey(), e.getValue()))
                .forEach(System.out::println);
    }
}
